// package com.plg.controller;

// import com.plg.service.RutaReporteService;
// import org.slf4j.Logger;
// import org.slf4j.LoggerFactory;
// import org.springframework.beans.factory.annotation.Autowired;
// import org.springframework.http.ResponseEntity;
// import org.springframework.web.bind.annotation.*;

// /**
//  * Controller para generar reportes de rutas
//  */
// @RestController
// @RequestMapping("/api/reportes")
// @CrossOrigin(origins = "*")
// public class RutaReporteController {
    
//     private static final Logger logger = LoggerFactory.getLogger(RutaReporteController.class);
    
//     @Autowired
//     private RutaReporteService rutaReporteService;
    
//     /**
//      * Genera reporte completo de pedidos cr√≠ticos
//      */
//     @GetMapping("/criticos")
//     public ResponseEntity<String> generarReporteCriticos(
//             @RequestParam(defaultValue = "20") int limite) {
        
//         try {
//             logger.info("üö® Solicitando reporte de pedidos cr√≠ticos con l√≠mite: {}", limite);
            
//             String reporte = rutaReporteService.generarReportePedidosCriticos(limite);
            
//             logger.info("‚úÖ Reporte de pedidos cr√≠ticos generado exitosamente");
//             return ResponseEntity.ok(reporte);
            
//         } catch (Exception e) {
//             logger.error("‚ùå Error generando reporte de cr√≠ticos: {}", e.getMessage(), e);
//             return ResponseEntity.status(500).body("‚ùå Error: " + e.getMessage());
//         }
//     }
    
//     /**
//      * Genera reporte simplificado (formato exacto solicitado)
//      */
//     @GetMapping("/criticos/simple")
//     public ResponseEntity<String> generarReporteSimple(
//             @RequestParam(defaultValue = "20") int limite) {
        
//         try {
//             logger.info("üìã Solicitando reporte simplificado de pedidos cr√≠ticos con l√≠mite: {}", limite);
            
//             String reporte = rutaReporteService.generarReporteSimplificado(limite);
            
//             logger.info("‚úÖ Reporte simplificado de pedidos cr√≠ticos generado exitosamente");
//             return ResponseEntity.ok(reporte);
            
//         } catch (Exception e) {
//             logger.error("‚ùå Error generando reporte simple de cr√≠ticos: {}", e.getMessage(), e);
//             return ResponseEntity.status(500).body("‚ùå Error: " + e.getMessage());
//         }
//     }
//     @GetMapping("/criticos/filtrado")
//     public ResponseEntity<String> generarReporteFiltrado(
//             @RequestParam(defaultValue = "20") int limite) {
        
//         try {
//             logger.info("üîç Solicitando reporte filtrado de rutas con pedidos cr√≠ticos con l√≠mite: {}", limite);
            
//             String reporte = rutaReporteService.generarReporteFiltrado(limite);
            
//             logger.info("‚úÖ Reporte filtrado de pedidos cr√≠ticos generado exitosamente");
//             return ResponseEntity.ok(reporte);
            
//         } catch (Exception e) {
//             logger.error("‚ùå Error generando reporte filtrado de cr√≠ticos: {}", e.getMessage(), e);
//             return ResponseEntity.status(500).body("‚ùå Error: " + e.getMessage());
//         }
//     }
//     /**
//      * DIAGN√ìSTICO: Genera reporte de asignaci√≥n de pedidos cr√≠ticos (sin rutas)
//      * Para analizar si el problema est√° en planificaci√≥n de pedidos o de rutas
//      */
//     @GetMapping("/criticos/diagnostico")
//     public ResponseEntity<String> diagnosticarPlanificacionPedidos(
//             @RequestParam(defaultValue = "20") int limite) {
        
//         try {
//             logger.info("üîç DIAGN√ìSTICO: Analizando planificaci√≥n de pedidos cr√≠ticos con l√≠mite: {}", limite);
            
//             String diagnostico = rutaReporteService.generarDiagnosticoPlanificacionPedidos(limite);
            
//             logger.info("‚úÖ Diagn√≥stico de planificaci√≥n de pedidos completado");
//             return ResponseEntity.ok(diagnostico);
            
//         } catch (Exception e) {
//             logger.error("‚ùå Error en diagn√≥stico de planificaci√≥n: {}", e.getMessage(), e);
//             return ResponseEntity.status(500).body("‚ùå Error en diagn√≥stico: " + e.getMessage());
//         }
//     }

//     /**
//      * DIAGN√ìSTICO: Analiza la planificaci√≥n de rutas desde asignaciones existentes
//      */
//     @GetMapping("/criticos/diagnostico-rutas")
//     public ResponseEntity<String> diagnosticarPlanificacionRutas(
//             @RequestParam(defaultValue = "20") int limite) {
        
//         try {
//             logger.info("üó∫Ô∏è DIAGN√ìSTICO: Analizando planificaci√≥n de rutas cr√≠ticas con l√≠mite: {}", limite);
            
//             String diagnostico = rutaReporteService.generarDiagnosticoRutas(limite);
            
//             logger.info("‚úÖ Diagn√≥stico de planificaci√≥n de rutas completado");
//             return ResponseEntity.ok(diagnostico);
            
//         } catch (Exception e) {
//             logger.error("‚ùå Error en diagn√≥stico de rutas: {}", e.getMessage(), e);
//             return ResponseEntity.status(500).body("‚ùå Error en diagn√≥stico de rutas: " + e.getMessage());
//         }
//     }

//     /**
//      * DIAGN√ìSTICO: Verifica el estado y funcionamiento del servicio A*
//      */
//     @GetMapping("/diagnostico-aestrella")
//     public ResponseEntity<String> diagnosticarAEstrella() {
        
//         try {
//             logger.info("üéØ DIAGN√ìSTICO: Verificando servicio A*...");
            
//             String diagnostico = rutaReporteService.generarDiagnosticoAEstrella();
            
//             logger.info("‚úÖ Diagn√≥stico A* completado");
//             return ResponseEntity.ok(diagnostico);
            
//         } catch (Exception e) {
//             logger.error("‚ùå Error en diagn√≥stico A*: {}", e.getMessage(), e);
//             return ResponseEntity.status(500).body("‚ùå Error en diagn√≥stico A*: " + e.getMessage());
//         }
//     }
//     /**
//      * DIAGN√ìSTICO: Analiza c√≥mo los bloqueos activos afectan rutas espec√≠ficas
//      */
//     @GetMapping("/diagnostico-bloqueos-rutas")
//     public ResponseEntity<String> diagnosticarBloqueos() {
        
//         try {
//             logger.info("üöß DIAGN√ìSTICO: Analizando impacto de bloqueos en rutas...");
            
//             String diagnostico = rutaReporteService.generarDiagnosticoBloqueos();
            
//             logger.info("‚úÖ Diagn√≥stico de bloqueos completado");
//             return ResponseEntity.ok(diagnostico);
            
//         } catch (Exception e) {
//             logger.error("‚ùå Error en diagn√≥stico de bloqueos: {}", e.getMessage(), e);
//             return ResponseEntity.status(500).body("‚ùå Error en diagn√≥stico de bloqueos: " + e.getMessage());
//         }
//     }
//     @GetMapping("/diagnostico-ruta-especifica")
//     public ResponseEntity<String> diagnosticarRutaEspecifica(
//             @RequestParam(defaultValue = "12") int origenX,
//             @RequestParam(defaultValue = "8") int origenY,
//             @RequestParam(defaultValue = "16") int destinoX,
//             @RequestParam(defaultValue = "13") int destinoY) {
        
//         try {
//             logger.info("üîç DIAGN√ìSTICO: Analizando ruta espec√≠fica ({},{}) ‚Üí ({},{})", 
//                     origenX, origenY, destinoX, destinoY);
            
//             String diagnostico = rutaReporteService.generarDiagnosticoRutaEspecifica(
//                 origenX, origenY, destinoX, destinoY);
            
//             logger.info("‚úÖ Diagn√≥stico de ruta espec√≠fica completado");
//             return ResponseEntity.ok(diagnostico);
            
//         } catch (Exception e) {
//             logger.error("‚ùå Error en diagn√≥stico de ruta espec√≠fica: {}", e.getMessage(), e);
//             return ResponseEntity.status(500).body("‚ùå Error: " + e.getMessage());
//         }
//     }
// }